<!DOCTYPE html>
<html lang="en"><head>
	<title>Learn C++  » 3.7 — Converting between binary and decimal » Print</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta name="Robots" content="noindex, nofollow">
			<link rel="stylesheet" href="Learn%20C++%20%C2%BB%203.7%20%E2%80%94%20Converting%20between%20binary%20and%20decimal%20%C2%BB%20Print_files/print-css.css" type="text/css" media="screen, print">
			<link rel="canonical" href="http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/">
</head>
<body>

<main role="main" class="center">

	
		<header class="entry-header">

			<span class="hat">
				<strong>
					- Learn C++ 
					- 
					<span dir="ltr">http://www.learncpp.com</span> 
					-
				</strong>
			</span>
			
			<div class="code-block code-block-1" style="float:left;margin:8px 8px 8px 0px;"><div class="ABD_display_wrapper ABD_shortcode_571576a3d515d"><div class="ABD_display ABD_display_noadblock"><div class="cf_monitor">
<script src="Learn%20C++%20%C2%BB%203.7%20%E2%80%94%20Converting%20between%20binary%20and%20decimal%20%C2%BB%20Print_files/ca-pub-0588844875925051.js"></script><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript" src="Learn%20C++%20%C2%BB%203.7%20%E2%80%94%20Converting%20between%20binary%20and%20decimal%20%C2%BB%20Print_files/show_ads.js">
</script><ins id="aswift_0_expand" style="display:inline-table;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" frameborder="0" height="280" width="336"></iframe></ins></ins>
</div></div><div class="ABD_display ABD_display_adblock" style="display: none;"><div style="width: 336px; height: 280px; display: inline-block; margin: 15px; padding: 15px; border-width: 1px; border-style: solid">
  <p>Hi there.</p>
  
  <p>It looks like you're using an ad blocker.</p>

  <p>That's okay.  But we would like you to know that we are able to keep this content free and updated because we're ad supported.</p>
  
  <p>If you're finding our content valuable, please consider supporting us by disabling your ad blocker for just this site.</p>

  <p>Thanks,</p>

  <p>Alex<br>LearnCpp.com</p>
</div></div></div></div>
			<h1 class="entry-title">
				3.7 — Converting between binary and decimal			</h1>

			<span class="entry-date">

				Posted By 

				<cite>Alex</cite> 

				On 

				<time>	
					June 17, 2007 @ 11:14 am 
				</time>

			  	<span>
			  		In 
			  		C++ Tutorial | 
			  	</span>	

		  		<a href="#comments_controls">
		  			138 Comments	  			</a>	  			

				</span>
			
		</header>	

		<div class="entry-content">

			<p>In order to understand the bit manipulation operators, it is first
 necessary to understand how integers are represented in binary.  We 
talked a little bit about this in section <a href="http://www.learncpp.com/cpp-tutorial/24-integers/" rel="external">2.4 -- Integers</a> <sup>[1]</sup>, and will expand upon it here.</p>
<p>Consider a normal decimal number, such as 5623.  We intuitively 
understand that these digits mean (5 * 1000) + (6 * 100) + (2 * 10) + (3
 * 1).  Because there are 10 decimal numbers, the value of each digit 
increases by a factor of 10.</p>
<p>Binary numbers work the same way, except because there are only 2 
binary numbers (0 and 1), the value of each digit increases by a factor 
of 2.  Just like commas are often used to make a large decimal number 
easy to read (e.g. 1,427,435), we often write binary numbers in groups 
of 4 bits to make them easier to read (e.g. 1101&nbsp;0101).</p>
<p style="clear: both">As a reminder, in binary, we count from 0 to 15 like this:</p>
<p> <!-- break around image --></p>
<table border="1" cellpadding="5" cellspacing="0">
<tbody><tr>
<th>Decimal Value</th>
<th style="text-align:right">Binary Value</th>
</tr>
<tr>
<td>0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td>1</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:right">10</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:right">11</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:right">100</td>
</tr>
<tr>
<td>5</td>
<td style="text-align:right">101</td>
</tr>
<tr>
<td>6</td>
<td style="text-align:right">110</td>
</tr>
<tr>
<td>7</td>
<td style="text-align:right">111</td>
</tr>
<tr>
<td>8</td>
<td style="text-align:right">1000</td>
</tr>
<tr>
<td>9</td>
<td style="text-align:right">1001</td>
</tr>
<tr>
<td>10</td>
<td style="text-align:right">1010</td>
</tr>
<tr>
<td>11</td>
<td style="text-align:right">1011</td>
</tr>
<tr>
<td>12</td>
<td style="text-align:right">1100</td>
</tr>
<tr>
<td>13</td>
<td style="text-align:right">1101</td>
</tr>
<tr>
<td>14</td>
<td style="text-align:right">1110</td>
</tr>
<tr>
<td>15</td>
<td style="text-align:right">1111</td>
</tr>
</tbody></table>
<p><strong>Converting binary to decimal</strong></p>
<p>In the following examples, we assume that we’re dealing with unsigned integers.</p>
<p>Consider the 8 bit (1 byte) binary number 0101 1110.  0101 1110 means
 (0 * 128) + (1 * 64) + (0 * 32) + (1 * 16) + (1 * 8) + (1 * 4) + (1 * 
2) + (0 * 1).  If we sum up all of these parts, we get the decimal 
number 64 + 16 + 8 + 4 + 2 = 94.</p>
<p>Here is the same process in table format.  We multiply each binary 
digit by its digit value (determined by its position).  Summing up all 
these values gives us the total.</p>
<p>Converting 0101 1110 to decimal:</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<td>Binary digit</td>
<td>0&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
</tr>
<tr>
<td>* Digit value
</td><td>128</td>
<td>64</td>
<td>32</td>
<td>16</td>
<td>8</td>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>= Total (94)
</td><td>0</td>
<td>64</td>
<td>0</td>
<td>16</td>
<td>8</td>
<td>4</td>
<td>2</td>
<td>0</td>
</tr>
</tbody></table>
<p>Let’s convert 1001 0111 to decimal:</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<td>Binary digit</td>
<td>1&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
</tr>
<tr>
<td>* Digit value
</td><td>128</td>
<td>64</td>
<td>32</td>
<td>16</td>
<td>8</td>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>= Total (151)
</td><td>128</td>
<td>0</td>
<td>0</td>
<td>16</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
</tbody></table>
<p>1001 0111 binary = 151 in decimal.</p>
<p>This can easily be extended to 16 or 32 bit binary numbers simply by 
adding more columns.  Note that it’s easiest to start on the right end, 
and work your way left, multiplying the digit value by 2 as you go.</p>
<p><strong>Method 1 for converting decimal to binary</strong></p>
<p>Converting from decimal to binary is a little more tricky, but still 
pretty straightforward.  There are two good methods to do this.</p>
<p>The first method involves continually dividing by 2, and writing down
 the remainders.  The binary number is constructed at the end from the 
remainders, from the bottom up.</p>
<p>Converting 148 from decimal to binary (using r to denote a remainder):</p>
<p>148 / 2 = 74 r0<br>
74 / 2 = 37 r0<br>
37 / 2 = 18 r1<br>
18 / 2 = 9 r0<br>
9 / 2 = 4 r1<br>
4 / 2 = 2 r0<br>
2 / 2 = 1 r0<br>
1 / 2 = 0 r1</p>
<p>Writing all of the remainders from the bottom up: 1001 0100</p>
<p>148 decimal = 1001 0100 binary.</p>
<p>You can verify this answer by converting the binary back to decimal:</p>
<p>(1 * 128) + (0 * 64) + (0 * 32) + (1 * 16) + (0 * 8) + (1 * 4) + (0 * 2) + (0 * 1) = 148</p>
<p><strong>Method 2 for converting decimal to binary</strong></p>
<p>The second method involves working backwards to figure out what each 
of the bits must be.  This method can be easier with small binary 
numbers.</p>
<p>Consider the decimal number 148 again.  What’s the largest power of 2 that’s smaller than 148?  128, so we’ll start there.</p>
<p>Is 148 &gt;= 128?  Yes, so the 128 bit must be 1.  148 - 128 = 20, which means we need to find bits worth 20 more.<br>
Is 20 &gt;= 64?  No, so the 64 bit must be 0.<br>
Is 20 &gt;= 32?  No, so the 32 bit must be 0.<br>
Is 20 &gt;= 16?  Yes, so the 16 bit must be 1.  20 - 16 = 4, which means we need to find bits worth 4 more.</p>
<p>Is 4 &gt;= 8?  No, so the 8 bit must be 0.<br>
Is 4 &gt;= 4?  Yes, so the 4 bit must be 1.  4 - 4 = 0, which means all the rest of the bits must be 0.</p>
<p>148 = (1 * 128) + (0 * 64) + (0 * 32) + (1 * 16) + (0 * 8) + (1 * 4) + (0 * 2) + (0 * 1) = 1001 0100</p>
<p>In table format:</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<td>Binary number</td>
<td>1&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
</tr>
<tr>
<td>* Digit value
</td><td>128</td>
<td>64</td>
<td>32</td>
<td>16</td>
<td>8</td>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>= Total (148)
</td><td>128</td>
<td>0</td>
<td>0</td>
<td>16</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>0</td>
</tr>
</tbody></table>
<p><strong>Another example</strong></p>
<p>Let’s convert 117 to binary using method 1:</p>
<p>117 / 2 = 58 r1<br>
58 / 2 = 29 r0<br>
29 / 2 = 14 r1<br>
14 / 2 = 7 r0<br>
7 / 2 = 3 r1<br>
3 / 2 = 1 r1<br>
1 / 2 = 0 r1</p>
<p>Constructing the number from the remainders from the bottom up, 117 = 111 0101 binary</p>
<p>And using method 2:</p>
<p>The largest power of 2 less than 117 is 64.</p>
<p>Is 117 &gt;= 64?  Yes, so the 64 bit must be 1.  117 - 64 = 53.<br>
Is 53 &gt;= 32?  Yes, so the 32 bit must be 1.  53 - 32 = 21.<br>
Is 21 &gt;= 16?  Yes, so the 16 bit must be 1.  21 - 16 = 5.</p>
<p>Is 5 &gt;= 8?  No, so the 8 bit must be 0.<br>
Is 5 &gt;= 4?  Yes, so the 4 bit must be 1.  5 - 4 = 1.<br>
Is 1 &gt;= 2?  No, so the 2 bit must be 0.<br>
Is 1 &gt;= 1?  Yes, so the 1 bit must be 1.</p>
<p>117 decimal = 111 0101 binary.</p>
<p><strong>Signed numbers and two’s complement</strong></p>
<p>In the above examples, we’ve dealt solely with unsigned integers.  In
 this section, we’ll take a look at how signed numbers (which can be 
negative) are dealt with.</p>
<p>Signed integers are typically stored using a method known as <strong>two’s complement</strong>.
  In two’s complement, the leftmost (most significant) bit is used as 
the sign bit.  A 0 sign bit means the number is positive, and a 1 sign 
bit means the number is negative.</p>
<p>Positive signed numbers are stored just like positive unsigned numbers (with the sign bit set to 0).</p>
<p>Negative signed numbers are stored as the inverse of the positive 
number, plus 1.  For example, here’s how we convert -5 to binary two’s 
complement:</p>
<p>First we figure out the binary representation for 5: 0000 0101<br>
Then we invert all of the bits: 1111 1010<br>
Then we add 1: 1111 1011</p>
<p>Converting -76 to binary:</p>
<p>Positive 76 in binary: 0100 1100<br>
Invert all the bits: 1011 0011<br>
Add 1: 1011 0100</p>
<p>Why do we add 1?  Consider the number 0.  If a negative value was 
simply represented as the inverse of the positive number, 0 would have 
two representations: 0000 0000 (positive zero) and 1111 1111 (negative 
zero).  By adding 1, 1111 1111 intentionally overflows and becomes 0000 
0000.  This prevents 0 from having two representations, and simplifies 
some of the internal logic needed to do arithmetic with negative 
numbers.</p>
<p>To convert a two’s complement binary number back into decimal, first look at the sign bit.</p>
<p>If the sign bit is 0, just convert the number as shown for unsigned numbers above.</p>
<p>If the sign bit is 1, then we invert the bits, add 1, then convert to
 decimal, then make that decimal number negative (because the sign bit 
was originally negative).</p>
<p>For example, to convert 1001 1110 from two’s complement into a decimal number:<br>
Given: 1001 1110<br>
Invert the bits: 0110 0001<br>
Add 1: 0110 0010<br>
Convert to decimal: (0 * 128) + (1 * 64) + (1 * 32) + (0 * 16) + (0 * 8) + (0 * 4) + (1 * 2) + (0 * 1) = 64 + 32 + 2 = 98<br>
Since the original sign bit was negative, the final value is -98.</p>
<p><strong>Why types matter</strong></p>
<p>Consider the binary value 1011 0100.  What value does this represent?
  You’d probably say 180, and if this were standard unsigned binary 
number, you’d be right.</p>
<p>However, if this value was stored using two’s complement, it would be -76.</p>
<p>And if the value were encoded some other way, it could be something else entirely.</p>
<p>So how does C++ know whether to print a variable containing binary 1011 0100 as 180 or -76?</p>
<p>Way back in section <a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/" rel="external">2.1 -- Basic addressing and variable declaration</a> <sup>[2]</sup>,
 we said, “When you assign a value to a data type, the the compiler and 
CPU takes care of the details of encoding your value into the 
appropriate sequence of bits for that data type. When you ask for your 
value back, your number is “reconstituted” from the sequence of bits in 
memory.”</p>
<p>So the answer is: it uses the type of the variable to convert the 
underlying binary representation back into the expected form.  So if the
 variable type was an unsigned integer, it would know that 1011 0100 was
 standard binary, and should be printed as 180.  If the variable was a 
signed integer, it would know that 1011 0100 was encoded using two’s 
complement (assuming that’s what it was using), and should be printed as
 -76.</p>
<p><strong>Quiz</strong></p>
<p>1) Convert 0100 1101 to decimal.<br>
2) Convert 93 to an 8-bit unsigned binary number.<br>
3) Convert -93 to an 8-bit signed binary number (using two’s complement).<br>
4) Convert 1010 0010 to an unsigned decimal number.<br>
5) Convert 1010 0010 to a signed decimal number (assume two’s complement).</p>
<p>6) Write a program that asks the user to input a number between 0 and
 255.  Print this number as an 8-bit binary number (of the form #### 
####).  Don’t use any bitwise operators.</p>
<p>Hint: Use method 2.  Assume the largest power of 2 is 128.<br>
Hint: Write a function to test whether your input number is greater than
 some power of 2.  If so, print ‘1’ and return your number minus the 
power of 2.</p>
<p><strong>Quiz answers</strong></p>
<p>1) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id113409315" style="display:none">
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<td>Binary digit</td>
<td>0&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
<td>0&nbsp;&nbsp;</td>
<td>1&nbsp;&nbsp;</td>
</tr>
<tr>
<td>* Digit value
</td><td>128</td>
<td>64</td>
<td>32</td>
<td>16</td>
<td>8</td>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>= Total (77)
</td><td>0</td>
<td>64</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>4</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>The answer is 77.
</p></div>
<p>2) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id1860756870" style="display:none">
Using method 1:<br>
93 / 2 = 46 r1<br>
46 / 2 = 23 r0<br>
23 / 2 = 11 r1<br>
11 / 2 = 5 r1<br>
5 / 2 = 2 r1<br>
2 / 2 = 1 r0<br>
1 / 2 = 0 r1<p></p>
<p>Working backwards from the remainders, 101 1101</p>
<p>Using method 2:<br>
The largest power of 2 less than 93 is 64.</p>
<p>Is 93 &gt;= 64?  Yes, so the 64 bit is 1.  93 - 64 = 29.<br>
Is 29 &gt;= 32?  No, so the 32 bit is 0.<br>
Is 29 &gt;= 16?  Yes, so the 16 bit is 1.  29 - 16 = 13.<br>
Is 13 &gt;= 8?  Yes, so the 8 bit is 1.  13 - 8 = 5.<br>
Is 5 &gt;= 4?  Yes, so the 4 bit is 1.  5 - 4 = 1.<br>
Is 1 &gt;= 2?  No, so the 2 bit is 0.<br>
Is 1 &gt;= 1?  Yes, so the 1 bit is 1.</p>
<p>The answer is 0101 1101.
</p></div>
<p>3) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id1563012673" style="display:none">
<p>We already know that 93 is 0101 1101 from the previous example.<br>
For two’s complement, we invert the bits: 1010 0010<br>
And add 1: 1010 0011
</p></div>
<p>4) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id673843990" style="display:none">
<p>Working right to left:<br>
1010 0010 = (0 * 1) + (1 * 2) + (0 * 4) + (0 * 8) + (0 * 16) + (1 * 32) + (0 * 64) + (1 * 128) = 2 + 32 + 128 = 162.</p>
<p>The answer is 162.
</p></div>
<p>5) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id1203072245" style="display:none">
<p>Since we’re told this number is in two’s complement, we can “undo” the two’s complement by inverting the bits and adding 1.<br>
First, start with out binary number: 1010 0010<br>
Flip the bits: 0101 1101<br>
Add 1: 0101 1110</p>
<p>Convert to decimal: 64 + 16 + 8 + 4 + 2 = 94<br>
Remember that this is a two’s complement #, and the original left bit was negative: -94</p>
<p>The answer is -94
</p></div>
<p>6) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id123503336" style="display:none">
<!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-575159199c0cc474176579" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-575159199c0cc474176579-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-2">2</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-4">4</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-6">6</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-8">8</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-10">10</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-12">12</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-14">14</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-16">16</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-18">18</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-20">20</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-22">22</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-24">24</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-26">26</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-28">28</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-29">29</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-30">30</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-31">31</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-32">32</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-33">33</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-34">34</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-35">35</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-36">36</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-37">37</div><div class="crayon-num crayon-striped-num" data-line="crayon-575159199c0cc474176579-38">38</div><div class="crayon-num" data-line="crayon-575159199c0cc474176579-39">39</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-575159199c0cc474176579-1"><span class="crayon-p">#include &lt;iostream&gt;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-2">&nbsp;</div><div class="crayon-line" id="crayon-575159199c0cc474176579-3"><span class="crayon-c">// x is our number to test</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-4"><span class="crayon-c">// pow is a power of 2 (e.g. 128, 64, 32, etc...)</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-5"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">printandDecrementBit</span><span class="crayon-sy">(</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">pow</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-6"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// Test whether our x is greater than some power of 2 and print the bit</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">&gt;=</span><span class="crayon-h"> </span><span class="crayon-v">pow</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"1"</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">else</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-11"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"0"</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-12">&nbsp;</div><div class="crayon-line" id="crayon-575159199c0cc474176579-13"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// If x is greater than our power of 2, subtract the power of 2</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-14"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">&gt;=</span><span class="crayon-h"> </span><span class="crayon-v">pow</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-15"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">-</span><span class="crayon-h"> </span><span class="crayon-v">pow</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-16"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">else</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-17"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-18"><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-19">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-20"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-21"><span class="crayon-sy">{</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-22"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"Enter an integer between 0 and 255: "</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-23"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-24"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-25">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-26"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">printandDecrementBit</span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-27"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">printandDecrementBit</span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">64</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-28"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">printandDecrementBit</span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">32</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-29"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">printandDecrementBit</span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">16</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-30">&nbsp;</div><div class="crayon-line" id="crayon-575159199c0cc474176579-31"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">" "</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-32">&nbsp;</div><div class="crayon-line" id="crayon-575159199c0cc474176579-33"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">printandDecrementBit</span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">8</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-34"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">printandDecrementBit</span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-35"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">printandDecrementBit</span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-36"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">printandDecrementBit</span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-37">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-575159199c0cc474176579-38"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575159199c0cc474176579-39"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0060 seconds] -->

</div>
<table border="0" cellpadding="3">
<tbody><tr><td>
	<a href="http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/" rel="external"><img src="Learn%20C++%20%C2%BB%203.7%20%E2%80%94%20Converting%20between%20binary%20and%20decimal%20%C2%BB%20Print_files/next.png" align="middle"> 3.8 -- Bitwise operators</a> <sup>[4]</sup>
</td></tr>
<tr><td>
        <a href="http://www.learncpp.com/#Chapter0" rel="external"><img src="Learn%20C++%20%C2%BB%203.7%20%E2%80%94%20Converting%20between%20binary%20and%20decimal%20%C2%BB%20Print_files/up.png" align="middle"> Index</a> <sup>[5]</sup>
</td></tr>
<tr><td>
	<a href="http://www.learncpp.com/cpp-tutorial/36-logical-operators/" rel="external"><img src="Learn%20C++%20%C2%BB%203.7%20%E2%80%94%20Converting%20between%20binary%20and%20decimal%20%C2%BB%20Print_files/prev.png" align="middle"> 3.6 -- Logical operators</a> <sup>[6]</sup>
</td></tr>
</tbody></table>

<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-email"><a href="http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=email" rel="external"><span>Email</span></a> <sup>[7]</sup></li><li class="share-facebook"><a href="http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=facebook" rel="external"><span>Facebook</span></a> <sup>[8]</sup></li><li class="share-twitter"><a href="http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=twitter" rel="external"><span>Twitter</span></a> <sup>[9]</sup></li><li class="share-google-plus-1"><a href="http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=google-plus-1" rel="external"><span>Google</span></a> <sup>[10]</sup></li><li class="share-pinterest"><a href="http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=pinterest" rel="external"><span>Pinterest</span></a> <sup>[11]</sup></li><li class="share-end"></li></ul></div></div></div><div class="code-block code-block-2" style="float:left;margin:8px 8px 8px 0px;"><div class="cf_monitor">
<div id="171844866">
    <script type="text/javascript">
    try {
        window._mNHandle.queue.push(function () {
		    window._mNDetails.loadTag("171844866", "336x280", "171844866");
		    });
		}
    catch (error) {}
	</script>
</div>
</div></div>
		</div>

		
	<div class="comments">
			</div>
	
	<footer class="footer">
		<p>
			Article printed from 
			Learn C++: 

			<strong dir="ltr">
				http://www.learncpp.com			</strong>
		</p>

		<p>
			URL to article: 
			<strong dir="ltr">
				http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/			</strong>
		</p>
		
					<p>URLs in this post:</p><p style="margin: 2px 0;">[1] 2.4 -- Integers: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/24-integers/</span></b></p><p style="margin: 2px 0;">[2] 2.1 -- Basic addressing and variable declaration: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/</span></b></p><p style="margin: 2px 0;">[3] Show Solution: <b><span dir="ltr">http://www.learncpp.comjavascript:void(0)</span></b></p><p style="margin: 2px 0;">[4] Image: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/</span></b></p><p style="margin: 2px 0;">[5] Image: <b><span dir="ltr">http://www.learncpp.com/#Chapter0</span></b></p><p style="margin: 2px 0;">[6] Image: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/36-logical-operators/</span></b></p><p style="margin: 2px 0;">[7] <span>Email</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=email</span></b></p><p style="margin: 2px 0;">[8] <span>Facebook</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=facebook</span></b></p><p style="margin: 2px 0;">[9] <span>Twitter</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=twitter</span></b></p><p style="margin: 2px 0;">[10] <span>Google</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=google-plus-1</span></b></p><p style="margin: 2px 0;">[11] <span>Pinterest</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/?share=pinterest</span></b></p><p></p>
		
		<p style="text-align: right;" id="print-link">
			<a href="#Print" onclick="window.print(); return false;" title="Click here to print.">
				Click 
				here				to print.			</a> 
		</p>

		
		<p style="text-align: center;">
			Copyright © 2015 Learn C++. All rights reserved.		</p>
	</footer>

</main>








</body></html>
<!-- Dynamic page generated in 1.369 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-06-03 02:16:58 -->
<!-- Compression = gzip -->