<!DOCTYPE html>
<html lang="en"><head>
	<title>Learn C++  » 3.1 — Operator precedence and associativity » Print</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta name="Robots" content="noindex, nofollow">
			<link rel="stylesheet" href="Learn%20C++%20%C2%BB%203.1%20%E2%80%94%20Operator%20precedence%20and%20associativity%20%C2%BB%20Print_files/print-css.css" type="text/css" media="screen, print">
			<link rel="canonical" href="http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/">
</head>
<body>

<main role="main" class="center">

	
		<header class="entry-header">

			<span class="hat">
				<strong>
					- Learn C++ 
					- 
					<span dir="ltr">http://www.learncpp.com</span> 
					-
				</strong>
			</span>
			
			<div class="code-block code-block-1" style="float:left;margin:8px 8px 8px 0px;"><div class="ABD_display_wrapper ABD_shortcode_571576a3d515d"><div class="ABD_display ABD_display_noadblock"><div class="cf_monitor">
<script src="Learn%20C++%20%C2%BB%203.1%20%E2%80%94%20Operator%20precedence%20and%20associativity%20%C2%BB%20Print_files/ca-pub-0588844875925051.js"></script><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript" src="Learn%20C++%20%C2%BB%203.1%20%E2%80%94%20Operator%20precedence%20and%20associativity%20%C2%BB%20Print_files/show_ads.js">
</script><ins id="aswift_0_expand" style="display:inline-table;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" frameborder="0" height="280" width="336"></iframe></ins></ins>
</div></div><div class="ABD_display ABD_display_adblock" style="display: none;"><div style="width: 336px; height: 280px; display: inline-block; margin: 15px; padding: 15px; border-width: 1px; border-style: solid">
  <p>Hi there.</p>
  
  <p>It looks like you're using an ad blocker.</p>

  <p>That's okay.  But we would like you to know that we are able to keep this content free and updated because we're ad supported.</p>
  
  <p>If you're finding our content valuable, please consider supporting us by disabling your ad blocker for just this site.</p>

  <p>Thanks,</p>

  <p>Alex<br>LearnCpp.com</p>
</div></div></div></div>
			<h1 class="entry-title">
				3.1 — Operator precedence and associativity			</h1>

			<span class="entry-date">

				Posted By 

				<cite>Alex</cite> 

				On 

				<time>	
					June 13, 2007 @ 3:55 pm 
				</time>

			  	<span>
			  		In 
			  		C++ Tutorial | 
			  	</span>	

		  		<a href="#comments_controls">
		  			59 Comments	  			</a>	  			

				</span>
			
		</header>	

		<div class="entry-content">

			<p>In order to properly evaluate an expression such as <code>4 + 2 * 3</code>,
 we must understand both what the operators do, and the correct order to
 apply them.  The order in which operators are evaluated in a compound 
expression is called <strong>operator precedence</strong>.  Using normal
 mathematical precedence rules (which state that multiplication is 
resolved before addition), we know that the above expression should 
evaluate as <code>4 + (2 * 3)</code> to produce the value 10.</p>
<p>In C++, all operators are assigned a level of precedence.  Those with
 the highest precedence are evaluated first.  You can see in the table 
below that multiplication and division (precedence level 5) have a 
higher precedence than addition and subtraction (precedence level 6).  
The compiler uses these levels to determine how to evaluate expressions 
it encounters.</p>
<p>Thus, 4 + 2 * 3 evaluates as 4 + (2 * 3) because multiplication has a higher level of precedence than addition.</p>
<p>If two operators with the same precedence level are adjacent to each other in an expression, the <strong>associativity rules</strong> tell the compiler whether to evaluate the operators from left to right or from right to left.  For example, in the expression <code>3 * 4 / 2</code>,
 the multiplication and division operators are both precedence level 5. 
 Level 5 has an associativity of left to right, so the expression is 
resolved from left to right: <code>(3 * 4) / 2 = 6</code>.</p>
<p style="clear: both"><strong>Table of operators</strong></p>
<p> <!-- break around image --></p>
<p>Notes:</p>
<ul>
<li>Precedence level 1 is the highest precedence level, and level 17 is 
the lowest.  Operators with a higher precedence level get evaluated 
first.</li>
<li>L-&gt;R means left to right associativity.</li>
<li>R-&gt;L means right to left associativity.</li>
</ul>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<th>Prec/Ass</th>
<th>Operator</th>
<th>Description</th>
<th>Pattern</th>
</tr>
<tr>
<td>1 None</td>
<td>
		::<br>
		::
	</td>
<td>
		Global scope (unary)<br>
		Class scope (binary)
	</td>
<td>
		::name<br>
		class_name::member_name<br>
	</td>
</tr>
<tr>
<td>2 L-&gt;R</td>
<td>
		()<br>
		()<br>
		()<br>
		{}<br>
		type()<br>
		type{}<br>
		[]<br>
		.<br>
		-&gt;<br>
		++<br>
		––<br>
		typeid<br>
		const_cast<br>
		dynamic_cast<br>
		reinterpret_cast<br>
		static_cast
	</td>
<td>
		Parenthesis<br>
		Function call<br>
		Initialization<br>
		Uniform initialization (C++11)<br>
		Value construction<br>
		Value construction (C++11)<br>
		Array subscript<br>
		Member access from object<br>
		Member access from object ptr<br>
		Post-increment<br>
		Post-decrement<br>
		Run-time type information<br>
		Cast away const<br>
		Run-time type-checked cast<br>
		Cast one type to another<br>
		Compile-time type-checked cast
	</td>
<td>
		(expression)<br>
		function_name(parameters)<br>
		type name(expression)<br>
		type name{expression}<br>
		type(expression)<br>
		type{expression}<br>
		pointer[expression]<br>
		object.member_name<br>
		object_pointer-&gt;member_name<br>
		lvalue++<br>
		lvalue––<br>
		typeid(type) or typeid(expression)<br>
		const_cast&lt;type&gt;(expression)<br>
		dynamic_cast&lt;type&gt;(expression)<br>
		reinterpret_cast&lt;type&gt;(expression)<br>
		static_cast&lt;type&gt;(expression)
	</td>
</tr>
<tr>
<td>3 R-&gt;L</td>
<td>
		+<br>
		-<br>
		++<br>
		––<br>
		!<br>
		~<br>
		(type)<br>
		sizeof<br>
		&amp;<br>
		*<br>
		new<br>
		new[]<br>
		delete<br>
		delete[]
	</td>
<td>
		Unary plus<br>
		Unary minus<br>
		Pre-increment<br>
		Pre-decrement<br>
		Logical NOT<br>
		Bitwise NOT<br>
		C-style cast<br>
		Size in bytes<br>
		Address of<br>
		Dereference<br>
		Dynamic memory allocation<br>
		Dynamic array allocation <br>
		Dynamic memory deletion<br>
		Dynamic array deletion
	</td>
<td>
		+expression<br>
		-expression<br>
		++lvalue<br>
		––lvalue<br>
		!expression<br>
		~expression<br>
		(type)expression<br>
		sizeof(type) or sizeof(expression)<br>
		&amp;lvalue<br>
		*expression<br>
		new type<br>
		new type[expression]<br>
		delete pointer<br>
		delete[] pointer
	</td>
</tr>
<tr>
<td>4 L-&gt;R</td>
<td>
		-&gt;*<br>
		.*
	</td>
<td>
		Member pointer selector<br>
		Member object selector
	</td>
<td>
		object_pointer-&gt;*pointer_to_member<br>
		object.*pointer_to_member
	</td>
</tr>
<tr>
<td>5 L-&gt;R</td>
<td>
		*<br>
		/<br>
		%
	</td>
<td>
		Multiplication<br>
		Division<br>
		Modulus
	</td>
<td>
		expression * expression<br>
		expression / expression<br>
		expression % expression
	</td>
</tr>
<tr>
<td>6 L-&gt;R</td>
<td>
		+<br>
		-
	</td>
<td>
		Addition<br>
		Subtraction
	</td>
<td>
		expression + expression<br>
		expression - expression
	</td>
</tr>
<tr>
<td>7 L-&gt;R</td>
<td>
		&lt;&lt;<br>
		&gt;&gt;
	</td>
<td>
		Bitwise shift left<br>
		Bitwise shift right
	</td>
<td>
		expression &lt;&lt; expression<br>
		expression &gt;&gt; expression
	</td>
</tr>
<tr>
<td>8 L-&gt;R</td>
<td>
		&lt;<br>
		&lt;=<br>
		&gt;<br>
		&gt;=
	</td>
<td>
		Comparison less than<br>
		Comparison less than or equals<br>
		Comparison greater than<br>
		Comparison greater than or equals
	</td>
<td>
		expression &lt; expression<br>
		expression &lt;= expression<br>
		expression &gt; expression<br>
		expression &gt;= expression
	</td>
</tr>
<tr>
<td>9 L-&gt;R</td>
<td>
		==<br>
		!=
	</td>
<td>
		Equality<br>
		Inequality
	</td>
<td>
		expression == expression<br>
		expression != expression
	</td>
</tr>
<tr>
<td>10 L-&gt;R</td>
<td>
		&amp;
	</td>
<td>
		Bitwise AND
	</td>
<td>
		expression &amp; expression
	</td>
</tr>
<tr>
<td>11 L-&gt;R</td>
<td>
		^
	</td>
<td>
		Bitwise XOR
	</td>
<td>
		expression ^ expression
	</td>
</tr>
<tr>
<td>12 L-&gt;R</td>
<td>
		|
	</td>
<td>
		Bitwise OR
	</td>
<td>
		expression | expression
	</td>
</tr>
<tr>
<td>13 L-&gt;R</td>
<td>
		&amp;&amp;
	</td>
<td>
		Logical AND
	</td>
<td>
		expression &amp;&amp; expression
	</td>
</tr>
<tr>
<td>14 L-&gt;R</td>
<td>
		||
	</td>
<td>
		Logical OR
	</td>
<td>
		expression || expression
	</td>
</tr>
<tr>
<td>15 R-&gt;L</td>
<td>
		?:<br>
		=<br>
		*=<br>
		/=<br>
		%=<br>
		+=<br>
		-=<br>
		&lt;&lt;=<br>
		&gt;&gt;=<br>
		&amp;=<br>
		|=<br>
		^=
	</td>
<td>
		Conditional (see note below)<br>
		Assignment<br>
		Multiplication assignment<br>
		Division assignment<br>
		Modulus assignment<br>
		Addition assignment<br>
		Subtraction assignment<br>
		Bitwise shift left assignment<br>
		Bitwise shift right assignment<br>
		Bitwise AND assignment<br>
		Bitwise OR assignment<br>
		Bitwise XOR assignment
	</td>
<td>
		expression ? expression : expression<br>
		lvalue = expression<br>
		lvalue *= expression<br>
		lvalue /= expression<br>
		lvalue %= expression<br>
		lvalue += expression<br>
		lvalue -= expression<br>
		lvalue &lt;&lt;= expression<br>
		lvalue &gt;&gt;= expression<br>
		lvalue &amp;= expression<br>
		lvalue |= expression<br>
		lvalue ^= expression
	</td>
</tr>
<tr>
<td>16 R-&gt;L</td>
<td>
		throw
	</td>
<td>
		Throw expression
	</td>
<td>
		throw expression
	</td>
</tr>
<tr>
<td>17 L-&gt;R</td>
<td>
		,
	</td>
<td>
		Comma operator
	</td>
<td>
		expression, expression
	</td>
</tr>
</tbody></table>
<p>Note: The expression in the middle of the conditional operator ?: is evaluated as if it were parenthesized.</p>
<p>A few operators you should already recognize: +, -, *, /, (), =, 
&lt;, &gt;, &lt;=, and &gt;=.  These arithmetic and relational operators
 have the same meaning in C++ as they do in every-day usage.</p>
<p>However, unless you have experience with another programming 
language, it’s likely the majority of the operators in this table will 
be incomprehensible to you right now.  That’s expected at this point.  
We’ll cover many of them in this chapter, and the rest will be 
introduced as there is a need for them.</p>
<p>The above table is primarily meant to be a reference chart that you 
can refer back to in the future to resolve any precedence or 
associativity questions you have.</p>
<p><strong>How do I do exponents?</strong></p>
<p>You’ll note that the ^ operator (commonly used to denote 
exponentiation in standard mathematical nomenclature) is a Bitwise XOR 
operation in C++.  C++ does not include an exponent operator.  To do 
exponents in C++, #include the &lt;cmath&gt; header, and use the pow() 
function:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-575158d310884467644131" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-575158d310884467644131-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-575158d310884467644131-2">2</div><div class="crayon-num" data-line="crayon-575158d310884467644131-3">3</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-575158d310884467644131-1"><span class="crayon-p">#include &lt;cmath&gt;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575158d310884467644131-2">&nbsp;</div><div class="crayon-line" id="crayon-575158d310884467644131-3"><span class="crayon-t">double</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">pow</span><span class="crayon-sy">(</span><span class="crayon-cn">3.0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">4.0</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// 3 to the 4th power</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0007 seconds] -->
<p></p>
<p>Note that the parameters and return value of pow are of type double. 
 Note that due to rounding errors in floating point numbers, the results
 of pow() may not be precise (slightly smaller or larger than what you’d
 expect).</p>
<p>If you want to do integer exponents, you’re best off just using your 
own function to do so, like this one (that uses the “exponentiation by 
squaring” algorithm for efficiency):</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-575158d310896918054108" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-575158d310896918054108-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-575158d310896918054108-2">2</div><div class="crayon-num" data-line="crayon-575158d310896918054108-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-575158d310896918054108-4">4</div><div class="crayon-num" data-line="crayon-575158d310896918054108-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-575158d310896918054108-6">6</div><div class="crayon-num" data-line="crayon-575158d310896918054108-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-575158d310896918054108-8">8</div><div class="crayon-num" data-line="crayon-575158d310896918054108-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-575158d310896918054108-10">10</div><div class="crayon-num" data-line="crayon-575158d310896918054108-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-575158d310896918054108-12">12</div><div class="crayon-num" data-line="crayon-575158d310896918054108-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-575158d310896918054108-14">14</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-575158d310896918054108-1"><span class="crayon-c">// note: exp must be non-negative</span></div><div class="crayon-line crayon-striped-line" id="crayon-575158d310896918054108-2"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">pow</span><span class="crayon-sy">(</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">base</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">exp</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-575158d310896918054108-3"><span class="crayon-sy">{</span></div><div class="crayon-line crayon-striped-line" id="crayon-575158d310896918054108-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">result</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575158d310896918054108-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">while</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">exp</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-575158d310896918054108-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-575158d310896918054108-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">exp</span><span class="crayon-h"> </span><span class="crayon-o">&amp;</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-575158d310896918054108-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">result</span><span class="crayon-h"> </span><span class="crayon-o">*=</span><span class="crayon-h"> </span><span class="crayon-v">base</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575158d310896918054108-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">exp</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575158d310896918054108-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">base</span><span class="crayon-h"> </span><span class="crayon-o">*=</span><span class="crayon-h"> </span><span class="crayon-v">base</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-575158d310896918054108-11"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-sy">}</span></div><div class="crayon-line crayon-striped-line" id="crayon-575158d310896918054108-12">&nbsp;</div><div class="crayon-line" id="crayon-575158d310896918054108-13"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">result</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-575158d310896918054108-14"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0024 seconds] -->
<p></p>
<p>Don’t worry if you don’t understand all of the parts of this function
 yet.  Just beware of overflowing your integer result, which can happen 
very quickly if either argument is large.</p>
<p><strong>Quiz</strong></p>
<p>1) You know from everyday mathematics that expressions inside of 
parenthesis get evaluated first.  For example, in the expression <code>(2 + 3) * 4</code>, the <code>(2 + 3)</code> part is evaluated first.</p>
<p>For this exercise, you are given a set of expressions that have no 
parenthesis.  Using the operator precedence and associativity rules in 
the table above, add parentheses to each expression to make it clear how
 the compiler will evaluate the expression.</p>
<p>Hint: Use the pattern column in the table above to determine whether 
the operator is unary (has one operand) or binary (has two operands).  
Review section <a href="http://www.learncpp.com/cpp-tutorial/15-a-first-look-at-operators/" rel="external">1.5 -- A first look at operators</a> <sup>[1]</sup> if you need a refresher on what unary and binary operators are.</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
<tbody><tr>
<td>
Sample problem: x = 2 + 3 % 4<p></p>
<p>Binary operator % has higher precedence than operator + or operator =, so it gets evaluated first:</p>
<p>x = 2 + (3 % 4)</p>
<p>Binary operator + has a higher precedence than operator =, so it gets evaluated next:</p>
<p>Final answer: x = (2 + (3 % 4))</p>
<p>We now no longer need the table above to understand how this expression will evaluate.</p>
</td>
</tr>
</tbody></table>
<p>a) x = 3 + 4 + 5;<br>
b) x = y = z;<br>
c) z *= ++y + 5;<br>
d) a || b &amp;&amp; c || d;</p>
<p><strong>Solutions</strong></p>
<p>1) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[2]</sup></p>
<div class="solution_div" id="id498770406" style="display:none">
a) Binary operator + has higher precedence than =:<p></p>
<p>x = (3 + 4 + 5);</p>
<p>Binary operator + has left to right association:</p>
<p>Final answer: x = ((3 + 4) + 5);</p>
<p>b) Binary operator = has right to left association:</p>
<p>Final answer: x = (y = z);</p>
<p>c) Unary operator ++ has the highest precedence:</p>
<p>z *= (++y) + 5;</p>
<p>Binary operator + has the next highest precedence:</p>
<p>Final answer: z *= ((++y) + 5);</p>
<p>d) Binary operator &amp;&amp; has higher precedence than ||:</p>
<p>a || (b &amp;&amp; c) || d;</p>
<p>Binary operator || has left to right association:</p>
<p>Final answer: (a || (b &amp;&amp; c)) || d;
</p></div>
<table border="0" cellpadding="3">
<tbody><tr><td>
	<a href="http://www.learncpp.com/cpp-tutorial/32-arithmetic-operators/" rel="external"><img src="Learn%20C++%20%C2%BB%203.1%20%E2%80%94%20Operator%20precedence%20and%20associativity%20%C2%BB%20Print_files/next.png" align="middle"> 3.2 -- Arithmetic operators</a> <sup>[3]</sup>
</td></tr>
<tr><td>
        <a href="http://www.learncpp.com/#Chapter0" rel="external"><img src="Learn%20C++%20%C2%BB%203.1%20%E2%80%94%20Operator%20precedence%20and%20associativity%20%C2%BB%20Print_files/up.png" align="middle"> Index</a> <sup>[4]</sup>
</td></tr>
<tr><td>
	<a href="http://www.learncpp.com/cpp-tutorial/210-comprehensive-quiz/" rel="external"><img src="Learn%20C++%20%C2%BB%203.1%20%E2%80%94%20Operator%20precedence%20and%20associativity%20%C2%BB%20Print_files/prev.png" align="middle"> 2.10 -- Chapter 2 comprehensive quiz</a> <sup>[5]</sup>
</td></tr>
</tbody></table>

<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-email"><a href="http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=email" rel="external"><span>Email</span></a> <sup>[6]</sup></li><li class="share-facebook"><a href="http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=facebook" rel="external"><span>Facebook</span></a> <sup>[7]</sup></li><li class="share-twitter"><a href="http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=twitter" rel="external"><span>Twitter</span></a> <sup>[8]</sup></li><li class="share-google-plus-1"><a href="http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=google-plus-1" rel="external"><span>Google</span></a> <sup>[9]</sup></li><li class="share-pinterest"><a href="http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=pinterest" rel="external"><span>Pinterest</span></a> <sup>[10]</sup></li><li class="share-end"></li></ul></div></div></div><div class="code-block code-block-2" style="float:left;margin:8px 8px 8px 0px;"><div class="cf_monitor">
<div id="171844866">
    <script type="text/javascript">
    try {
        window._mNHandle.queue.push(function () {
		    window._mNDetails.loadTag("171844866", "336x280", "171844866");
		    });
		}
    catch (error) {}
	</script>
</div>
</div></div>
		</div>

		
	<div class="comments">
			</div>
	
	<footer class="footer">
		<p>
			Article printed from 
			Learn C++: 

			<strong dir="ltr">
				http://www.learncpp.com			</strong>
		</p>

		<p>
			URL to article: 
			<strong dir="ltr">
				http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/			</strong>
		</p>
		
					<p>URLs in this post:</p><p style="margin: 2px 0;">[1] 1.5 -- A first look at operators: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/15-a-first-look-at-operators/</span></b></p><p style="margin: 2px 0;">[2] Show Solution: <b><span dir="ltr">http://www.learncpp.comjavascript:void(0)</span></b></p><p style="margin: 2px 0;">[3] Image: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/32-arithmetic-operators/</span></b></p><p style="margin: 2px 0;">[4] Image: <b><span dir="ltr">http://www.learncpp.com/#Chapter0</span></b></p><p style="margin: 2px 0;">[5] Image: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/210-comprehensive-quiz/</span></b></p><p style="margin: 2px 0;">[6] <span>Email</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=email</span></b></p><p style="margin: 2px 0;">[7] <span>Facebook</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=facebook</span></b></p><p style="margin: 2px 0;">[8] <span>Twitter</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=twitter</span></b></p><p style="margin: 2px 0;">[9] <span>Google</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=google-plus-1</span></b></p><p style="margin: 2px 0;">[10] <span>Pinterest</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/31-precedence-and-associativity/?share=pinterest</span></b></p><p></p>
		
		<p style="text-align: right;" id="print-link">
			<a href="#Print" onclick="window.print(); return false;" title="Click here to print.">
				Click 
				here				to print.			</a> 
		</p>

		
		<p style="text-align: center;">
			Copyright © 2015 Learn C++. All rights reserved.		</p>
	</footer>

</main>








</body></html>
<!-- Dynamic page generated in 2.287 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-06-03 02:15:48 -->
<!-- Compression = gzip -->