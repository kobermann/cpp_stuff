<!DOCTYPE html>
<html lang="en"><head>
	<title>Learn C++  » 3.6 — Logical operators » Print</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta name="Robots" content="noindex, nofollow">
			<link rel="stylesheet" href="Learn%20C++%20%C2%BB%203.6%20%E2%80%94%20Logical%20operators%20%C2%BB%20Print_files/print-css.css" type="text/css" media="screen, print">
			<link rel="canonical" href="http://www.learncpp.com/cpp-tutorial/36-logical-operators/">
</head>
<body>

<main role="main" class="center">

	
		<header class="entry-header">

			<span class="hat">
				<strong>
					- Learn C++ 
					- 
					<span dir="ltr">http://www.learncpp.com</span> 
					-
				</strong>
			</span>
			
			<div class="code-block code-block-1" style="float:left;margin:8px 8px 8px 0px;"><div class="ABD_display_wrapper ABD_shortcode_571576a3d515d"><div class="ABD_display ABD_display_noadblock"><div class="cf_monitor">
<script src="Learn%20C++%20%C2%BB%203.6%20%E2%80%94%20Logical%20operators%20%C2%BB%20Print_files/ca-pub-0588844875925051.js"></script><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript" src="Learn%20C++%20%C2%BB%203.6%20%E2%80%94%20Logical%20operators%20%C2%BB%20Print_files/show_ads.js">
</script><ins id="aswift_0_expand" style="display:inline-table;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" frameborder="0" height="280" width="336"></iframe></ins></ins>
</div></div><div class="ABD_display ABD_display_adblock" style="display: none;"><div style="width: 336px; height: 280px; display: inline-block; margin: 15px; padding: 15px; border-width: 1px; border-style: solid">
  <p>Hi there.</p>
  
  <p>It looks like you're using an ad blocker.</p>

  <p>That's okay.  But we would like you to know that we are able to keep this content free and updated because we're ad supported.</p>
  
  <p>If you're finding our content valuable, please consider supporting us by disabling your ad blocker for just this site.</p>

  <p>Thanks,</p>

  <p>Alex<br>LearnCpp.com</p>
</div></div></div></div>
			<h1 class="entry-title">
				3.6 — Logical operators			</h1>

			<span class="entry-date">

				Posted By 

				<cite>Alex</cite> 

				On 

				<time>	
					June 15, 2007 @ 1:35 pm 
				</time>

			  	<span>
			  		In 
			  		C++ Tutorial | 
			  	</span>	

		  		<a href="#comments_controls">
		  			63 Comments	  			</a>	  			

				</span>
			
		</header>	

		<div class="entry-content">

			<p>While relational (comparison) operators can be used to test 
whether a particular condition is true or false, they can only test one 
condition at a time.  Often we need to know whether multiple conditions 
are true at once.  For example, to check whether we’ve won the lottery, 
we have to compare whether all of the multiple numbers we picked match 
the winning numbers.  In a lottery with 6 numbers, this would involve 6 
comparisons, <em>all</em> of which have to be true.  Other times, we 
need to know whether any one of multiple conditions is true.  For 
example, we may decide to skip work today if we’re sick, or if we’re too
 tired, or if won the lottery in our previous example.  This would 
involve checking whether <em>any</em> of 3 comparisons is true.</p>
<p>Logical operators provide us with this capability to test multiple conditions.</p>
<p>C++ provides us with 3 logical operators:</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<th>Operator</th>
<th>Symbol</th>
<th>Form</th>
<th>Operation</th>
</tr>
<tr>
<td>Logical NOT</td>
<td>!</td>
<td>!x</td>
<td>true if x is false, or false if x is true</td>
</tr>
<tr>
<td>Logical AND</td>
<td>&amp;&amp;</td>
<td>x &amp;&amp; y</td>
<td>true if both x and y are true, false otherwise</td>
</tr>
<tr>
<td>Logical OR</td>
<td>||</td>
<td>x || y</td>
<td>true if either x or y are true, false otherwise</td>
</tr>
</tbody></table>
<p><strong>Logical NOT</strong></p>
<p>You have already run across the logical NOT unary operator in section <a href="http://www.learncpp.com/cpp-tutorial/26-boolean-values/" rel="external">2.6 -- Boolean values</a> <sup>[1]</sup>.  We can summarize the effects of logical NOT like so:</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<th colspan="2">Logical NOT (operator !)</th>
</tr>
<tr>
<th>Right operand</th>
<th>Result</th>
</tr>
<tr>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
</tr>
</tbody></table>
<p>If logical NOT’s operand evaluates to true, logical NOT evaluates to 
false.  If logical NOT’s operand evaluates to false, logical NOT 
evaluates to true.  In other words, logical NOT flips a boolean value 
from true to false, and vice-versa.</p>
<p>Logical NOT is often used in conditionals:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-5751591213195836587326" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5751591213195836587326-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5751591213195836587326-2">2</div><div class="crayon-num" data-line="crayon-5751591213195836587326-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5751591213195836587326-4">4</div><div class="crayon-num" data-line="crayon-5751591213195836587326-5">5</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5751591213195836587326-1"><span class="crayon-t">bool</span><span class="crayon-h"> </span><span class="crayon-v">bTooLarge</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// bTooLarge is true if x &gt; 100</span></div><div class="crayon-line crayon-striped-line" id="crayon-5751591213195836587326-2"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-o">!</span><span class="crayon-v">bTooLarge</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5751591213195836587326-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// do something with x</span></div><div class="crayon-line crayon-striped-line" id="crayon-5751591213195836587326-4"><span class="crayon-st">else</span></div><div class="crayon-line" id="crayon-5751591213195836587326-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// print an error</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0009 seconds] -->
<p></p>
<p>One thing to be wary of is that logical NOT has a very high level of 
precedence.  New programmers often make the following mistake:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-57515912131a9377586799" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-57515912131a9377586799-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131a9377586799-2">2</div><div class="crayon-num" data-line="crayon-57515912131a9377586799-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131a9377586799-4">4</div><div class="crayon-num" data-line="crayon-57515912131a9377586799-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131a9377586799-6">6</div><div class="crayon-num" data-line="crayon-57515912131a9377586799-7">7</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-57515912131a9377586799-1"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131a9377586799-2"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-57515912131a9377586799-3">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-57515912131a9377586799-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-o">!</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-57515912131a9377586799-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"x does not equal y"</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131a9377586799-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">else</span></div><div class="crayon-line" id="crayon-57515912131a9377586799-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"x equals y"</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0013 seconds] -->
<p></p>
<p>This program prints “x equals y”!  But x does not equal y, so how is 
this possible?  The answer is that because the logical NOT operator has 
higher precedence than the equality operator, the expression <code>! x == y</code> actually evaluates as <code>(!x) == y</code>.  Since x is 5, !x evaluates to 0, and 0 == y is false, so the else statement executes!</p>
<p>Reminder: any non-zero integer value evaluates to <em>true</em> when 
used in a boolean context.  Since x is 5, x evaluates to true, and !x 
evaluates to false (0).  Mixing integer and boolean operations like this
 can be very confusing, and should be avoided!</p>
<p>The correct way to write the above snippet is:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-57515912131b1717240120" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-57515912131b1717240120-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131b1717240120-2">2</div><div class="crayon-num" data-line="crayon-57515912131b1717240120-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131b1717240120-4">4</div><div class="crayon-num" data-line="crayon-57515912131b1717240120-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131b1717240120-6">6</div><div class="crayon-num" data-line="crayon-57515912131b1717240120-7">7</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-57515912131b1717240120-1"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131b1717240120-2"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-57515912131b1717240120-3">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-57515912131b1717240120-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-o">!</span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-57515912131b1717240120-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"x does not equal y"</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131b1717240120-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">else</span></div><div class="crayon-line" id="crayon-57515912131b1717240120-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"x equals y"</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0013 seconds] -->
<p></p>
<p>This way, x == y will be evaluated first, and then logical NOT will flip the boolean result.</p>
<p><em>Rule: If logical NOT is intended to operate on the result of 
other operators, the other operators and their operands need to be 
enclosed in parenthesis.</em><br>
<em>Rule: It’s a good idea to always use parenthesis to make your intent
 clear -- that way, you don’t even have to remember the precedence 
rules.</em></p>
<p>Simple uses of logical NOT, such as <code>if (!bValue)</code> do not need parenthesis because precedence does not come into play.</p>
<p><strong>Logical OR</strong></p>
<p>The logical OR operator is used to test whether either of two 
conditions is true.  If the left operand evaluates to true, or the right
 operand evaluates to true, the logical OR operator returns true.  If 
both operands are true, then logical OR will return true as well.</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<th colspan="3">Logical OR (operator ||)</th>
</tr>
<tr>
<th>Left operand</th>
<th>Right operand</th>
<th>Result</th>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
</tbody></table>
<p>For example, consider the following program:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-57515912131bc886730631" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-57515912131bc886730631-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131bc886730631-2">2</div><div class="crayon-num" data-line="crayon-57515912131bc886730631-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131bc886730631-4">4</div><div class="crayon-num" data-line="crayon-57515912131bc886730631-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131bc886730631-6">6</div><div class="crayon-num" data-line="crayon-57515912131bc886730631-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131bc886730631-8">8</div><div class="crayon-num" data-line="crayon-57515912131bc886730631-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131bc886730631-10">10</div><div class="crayon-num" data-line="crayon-57515912131bc886730631-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131bc886730631-12">12</div><div class="crayon-num" data-line="crayon-57515912131bc886730631-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131bc886730631-14">14</div><div class="crayon-num" data-line="crayon-57515912131bc886730631-15">15</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-57515912131bc886730631-1"><span class="crayon-p">#include &lt;iostream&gt;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131bc886730631-2">&nbsp;</div><div class="crayon-line" id="crayon-57515912131bc886730631-3"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131bc886730631-4"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-57515912131bc886730631-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-t">namespace</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131bc886730631-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"Enter a number: "</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-57515912131bc886730631-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131bc886730631-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-57515912131bc886730631-9">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-57515912131bc886730631-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-t">value</span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-h"> </span><span class="crayon-o">||</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-57515912131bc886730631-11"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"You picked 0 or 1"</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131bc886730631-12"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">else</span></div><div class="crayon-line" id="crayon-57515912131bc886730631-13"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"You did not pick 0 or 1"</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131bc886730631-14"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-57515912131bc886730631-15"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0023 seconds] -->
<p></p>
<p>In this case, we use the logical OR operator to test whether either 
the left condition (value == 0) or the right condition (value == 1) is 
true.  If either (or both) are true, the logical OR operator evaluates 
to true, which means the if statement executes.  If neither are true, 
the logical OR operator evaluates to false, which means the else 
statement executes.</p>
<p>You can string together many logical OR statements:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-57515912131c8163234005" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-57515912131c8163234005-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131c8163234005-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-57515912131c8163234005-1"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-h"> </span><span class="crayon-o">||</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-h"> </span><span class="crayon-o">||</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-h"> </span><span class="crayon-o">||</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">3</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131c8163234005-2"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"You picked 0, 1, 2, or 3"</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0013 seconds] -->
<p></p>
<p>New programmers sometimes confuse the logical OR operator (||) with 
the bitwise OR operator (|).  Even though they both have OR in the name,
 they perform different functions.  Mixing them up will probably lead to
 incorrect results.</p>
<p><strong>Logical AND</strong></p>
<p>The logical AND operator is used to test whether both conditions are 
true.  If both conditions are true, logical AND returns true.  
Otherwise, it returns false.</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<th colspan="3">Logical AND (operator &amp;&amp;)</th>
</tr>
<tr>
<th>Left operand</th>
<th>Right operand</th>
<th>Result</th>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
</tbody></table>
<p>For example, we might want to know if the value of variable x is 
between 10 and 20.  This is actually two conditions: we need to know if x
 is greater than 10, and also whether x is less then 20.</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-57515912131d5180604823" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-57515912131d5180604823-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131d5180604823-2">2</div><div class="crayon-num" data-line="crayon-57515912131d5180604823-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131d5180604823-4">4</div><div class="crayon-num" data-line="crayon-57515912131d5180604823-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131d5180604823-6">6</div><div class="crayon-num" data-line="crayon-57515912131d5180604823-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131d5180604823-8">8</div><div class="crayon-num" data-line="crayon-57515912131d5180604823-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131d5180604823-10">10</div><div class="crayon-num" data-line="crayon-57515912131d5180604823-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131d5180604823-12">12</div><div class="crayon-num" data-line="crayon-57515912131d5180604823-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131d5180604823-14">14</div><div class="crayon-num" data-line="crayon-57515912131d5180604823-15">15</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-57515912131d5180604823-1"><span class="crayon-p">#include &lt;iostream&gt;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131d5180604823-2">&nbsp;</div><div class="crayon-line" id="crayon-57515912131d5180604823-3"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131d5180604823-4"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-57515912131d5180604823-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-t">namespace</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131d5180604823-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"Enter a number: "</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-57515912131d5180604823-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131d5180604823-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-57515912131d5180604823-9">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-57515912131d5180604823-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-cn">10</span><span class="crayon-h"> </span><span class="crayon-o">&amp;&amp;</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-o">&lt;</span><span class="crayon-h"> </span><span class="crayon-cn">20</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-57515912131d5180604823-11"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"Your value is between 10 and 20"</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131d5180604823-12"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">else</span></div><div class="crayon-line" id="crayon-57515912131d5180604823-13"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"Your value is not between 10 and 20"</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131d5180604823-14"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-57515912131d5180604823-15"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0027 seconds] -->
<p></p>
<p>In this case, we use the logical AND operator to test whether the 
left condition (value &gt; 10) AND the right condition (value &lt; 20) 
are both true.  If both are true, the logical AND operator evaluates to 
true, and the if statement executes.  If neither are true, or only one 
is true, the logical AND operator evaluates to false, and the else 
statement executes.</p>
<p>As with logical OR, you can string together many logical AND statements:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-57515912131e0652318742" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-57515912131e0652318742-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131e0652318742-2">2</div><div class="crayon-num" data-line="crayon-57515912131e0652318742-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131e0652318742-4">4</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-57515912131e0652318742-1"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-cn">10</span><span class="crayon-h"> </span><span class="crayon-o">&amp;&amp;</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-o">&lt;</span><span class="crayon-h"> </span><span class="crayon-cn">20</span><span class="crayon-h"> </span><span class="crayon-o">&amp;&amp;</span><span class="crayon-h"> </span><span class="crayon-t">value</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-cn">16</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131e0652318742-2"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// do something</span></div><div class="crayon-line" id="crayon-57515912131e0652318742-3"><span class="crayon-st">else</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131e0652318742-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// do something else</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0011 seconds] -->
<p></p>
<p>If all of these conditions are true, the if statement will execute.  
If any of these conditions are false, the else statement will execute.</p>
<p><strong>Short circuit evaluation</strong></p>
<p>In order for logical AND to return true, both operands must evaluate 
to true.  If the first operand evaluates to false, logical AND knows it 
must return false regardless of whether the second operand evaluates to 
true or false.  In this case, the logical AND operator will go ahead and
 return false immediately without even evaluating the second operand!  
This is known as <strong>short circuit evaluation</strong>, and it is done primarily for optimization purposes.</p>
<p>Similarly, if the first operand for logical OR is true, then the 
entire OR condition has to evaluate to true, and the second operand does
 not need to be evaluated.</p>
<p>Short circuit evaluation presents another opportunity to show why 
operators that cause side effects should not be used in compound 
expressions.  Consider the following snippet:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-57515912131e8011209014" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-57515912131e8011209014-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-57515912131e8011209014-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-57515912131e8011209014-1"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-h"> </span><span class="crayon-o">&amp;&amp;</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-o">++</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-57515912131e8011209014-2"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// do something</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0007 seconds] -->
<p></p>
<p>if x does not equal 1, the conditional must be false, so y++ never 
gets evaluated!  Thus, y will only be incremented if x evaluates to 1, 
which is probably not what the programmer intended!</p>
<p>As with logical and bitwise OR, new programmers sometimes confuse the
 logical AND operator (&amp;&amp;) with the bitwise AND operator 
(&amp;).</p>
<p><strong>Mixing ANDs and ORs</strong></p>
<p>Mixing logical AND and logical OR operators in the same expression 
often can not be avoided, but it is an area full of potential dangers.</p>
<p>Many programmers assume that logical AND and logical OR have the same
 precedence (or forget that they don’t), just like addition/subtraction 
and multiplication/division do.  However, logical AND has higher 
precedence than logical OR, thus logical AND operators will be evaluated
 ahead of logical OR operators (unless they have been parenthesized).</p>
<p>As a result of this, new programmers will often write expressions such as <code>value1 || value2 &amp;&amp; value3</code>.  Because logical AND has higher precedence, this evaluates as <code>value1 || (value2 &amp;&amp; value3)</code>, not <code>(value1 || value2) &amp;&amp; value3</code>.
  Hopefully that’s what the programmer wanted!  If the programmer was 
assuming left to right evaluation (as happens with addition/subtraction,
 or multiplication/division), the programmer will get a result he or she
 was not expecting!</p>
<p>When mixing logical AND and logical OR in the same expression, it is a
 good idea to explicitly parenthesize each operator and its operands.  
This helps prevent precedence mistakes, makes your code easier to read, 
and clearly defines how you intended the expression to evaluate.  For 
example, rather than writing <code>value1 &amp;&amp; value2 || value3 &amp;&amp; value4</code>, it is better to write <code>(value1 &amp;&amp; value2) || (value3 &amp;&amp; value4)</code>.</p>
<p><strong>De Morgan’s law</strong></p>
<p>Many programmers also make the mistake of thinking that <code>!(x &amp;&amp; y)</code> is the same thing as <code>!x &amp;&amp; !y</code>.  Unfortunately, you can not “distribute” the logical NOT in that manner.</p>
<p><a href="http://en.wikipedia.org/wiki/De_Morgan%27s_laws" rel="external">De Morgan’s law</a> <sup>[2]</sup> tells us how the logical NOT should be distributed in these cases:</p>
<p><code>!(x &amp;&amp; y)</code> is equivalent to <code>!x || !y</code><br>
<code>!(x || y)</code> is equivalent to <code>!x &amp;&amp; !y</code></p>
<p>In other words, when you distribute the logical NOT, you also need to flip logical AND to logical OR, and vice-versa!</p>
<p>This can sometimes be useful when trying to make up complex expressions easier to read.</p>
<p><strong>Where’s the logical exclusive or (XOR) operator?</strong></p>
<p>Logical XOR is a logical operator provided in some languages that is used to test whether an odd number of conditions is true.</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<th colspan="3">Logical XOR</th>
</tr>
<tr>
<th>Left operand</th>
<th>Right operand</th>
<th>Result</th>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>false</td>
</tr>
</tbody></table>
<p>C++ doesn’t provide a logical XOR operator.  Unlike logical OR or 
logical AND, XOR cannot be short circuit evaluated.  Because of this, 
making an XOR operator out of logical OR and logical AND operators is 
challenging.  However, you can easily mimic logical XOR using the not 
equals operator (!=):</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-57515912131f3754906399" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-57515912131f3754906399-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-57515912131f3754906399-1"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-h"> </span><span class="crayon-c">// a XOR b, assuming a and b are booleans</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0005 seconds] -->
<p></p>
<p>This can be extended to multiple operands as follows:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-57515912131f9762085496" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-57515912131f9762085496-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-57515912131f9762085496-1"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-v">c</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-v">d</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-h"> </span><span class="crayon-c">// a XOR b XOR c XOR d, assuming a, b, c, and d are booleans</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0010 seconds] -->
<p></p>
<p>Note that the above XOR patterns only work if the operands are booleans (not integers).</p>
<p>If you need a form of XOR that works with non-boolean operands, you can use this slightly more complicated form:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-5751591213200183134470" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5751591213200183134470-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5751591213200183134470-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5751591213200183134470-1"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-o">!</span><span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-o">!</span><span class="crayon-v">b</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-h"> </span><span class="crayon-c">//a XOR b, works on any data types that can be converted to bool</span></div><div class="crayon-line crayon-striped-line" id="crayon-5751591213200183134470-2"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-o">!</span><span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-o">!</span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-o">!</span><span class="crayon-v">c</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-o">!</span><span class="crayon-v">d</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-h"> </span><span class="crayon-c">// a XOR b XOR c XOR d, for any type that can be converted to bool</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0014 seconds] -->
<p></p>
<p>In this form, the logical NOT operator is used to convert the operand
 to an inverse boolean value.  However, XOR evaluates the same way when 
all operands have been inverted, so this does not impact the result.</p>
<p><strong>Quiz</strong></p>
<p>Evaluate the following:<br>
1) (true &amp;&amp; true) || false<br>
2) (false &amp;&amp; true) || true<br>
3) (false &amp;&amp; true) || false || true<br>
4) (5 &gt; 6 || 4 &gt; 3) &amp;&amp; (7 &gt; 8)<br>
5) !(7 &gt; 6 || 3 &gt; 4)</p>
<p><strong>Quiz answers</strong></p>
<p>Note: in the following answers, we “explain our work” by showing you 
the steps taken to get to the final answer.  The steps are separated by a
 =&gt; symbol.  For example “(true || false) =&gt; true” means we 
evaluated “(true || false)” to arrive at the value “true”.</p>
<p>1) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id1487400875" style="display:none">
(true &amp;&amp; true) || false =&gt;<br>
true || false =&gt;<br>
true
</div>
<p>2) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id1819505280" style="display:none">
(false &amp;&amp; true) || true =&gt;<br>
false || true =&gt;<br>
true
</div>
<p>3) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id899825181" style="display:none">
(false &amp;&amp; true) || false || true =&gt;<br>
false || false || true =&gt;<br>
false || true =&gt;<br>
true
</div>
<p>4) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id769353793" style="display:none">
(5 &gt; 6 || 4 &gt; 3) &amp;&amp; (7 &gt; 8) =&gt;<br>
(false || true) &amp;&amp; false =&gt;<br>
true &amp;&amp; false =&gt;<br>
false
</div>
<p>5) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[3]</sup></p>
<div class="solution_div" id="id1308339968" style="display:none"> !(7 &gt; 6 || 3 &gt; 4) =&gt;<br>
!(true || false) =&gt;<br>
!true =&gt;<br>
false
</div>
<table border="0" cellpadding="3">
<tbody><tr><td>
	<a href="http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/" rel="external"><img src="Learn%20C++%20%C2%BB%203.6%20%E2%80%94%20Logical%20operators%20%C2%BB%20Print_files/next.png" align="middle"> 3.7 -- Converting between binary and decimal</a> <sup>[4]</sup>
</td></tr>
<tr><td>
        <a href="http://www.learncpp.com/#Chapter0" rel="external"><img src="Learn%20C++%20%C2%BB%203.6%20%E2%80%94%20Logical%20operators%20%C2%BB%20Print_files/up.png" align="middle"> Index</a> <sup>[5]</sup>
</td></tr>
<tr><td>
	<a href="http://www.learncpp.com/cpp-tutorial/35-relational-operators-comparisons/" rel="external"><img src="Learn%20C++%20%C2%BB%203.6%20%E2%80%94%20Logical%20operators%20%C2%BB%20Print_files/prev.png" align="middle"> 3.5 -- Relational operators (comparisons)</a> <sup>[6]</sup>
</td></tr>
</tbody></table>

<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-email"><a href="http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=email" rel="external"><span>Email</span></a> <sup>[7]</sup></li><li class="share-facebook"><a href="http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=facebook" rel="external"><span>Facebook</span></a> <sup>[8]</sup></li><li class="share-twitter"><a href="http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=twitter" rel="external"><span>Twitter</span></a> <sup>[9]</sup></li><li class="share-google-plus-1"><a href="http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=google-plus-1" rel="external"><span>Google</span></a> <sup>[10]</sup></li><li class="share-pinterest"><a href="http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=pinterest" rel="external"><span>Pinterest</span></a> <sup>[11]</sup></li><li class="share-end"></li></ul></div></div></div><div class="code-block code-block-2" style="float:left;margin:8px 8px 8px 0px;"><div class="cf_monitor">
<div id="171844866">
    <script type="text/javascript">
    try {
        window._mNHandle.queue.push(function () {
		    window._mNDetails.loadTag("171844866", "336x280", "171844866");
		    });
		}
    catch (error) {}
	</script>
</div>
</div></div>
		</div>

		
	<div class="comments">
			</div>
	
	<footer class="footer">
		<p>
			Article printed from 
			Learn C++: 

			<strong dir="ltr">
				http://www.learncpp.com			</strong>
		</p>

		<p>
			URL to article: 
			<strong dir="ltr">
				http://www.learncpp.com/cpp-tutorial/36-logical-operators/			</strong>
		</p>
		
					<p>URLs in this post:</p><p style="margin: 2px 0;">[1] 2.6 -- Boolean values: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/26-boolean-values/</span></b></p><p style="margin: 2px 0;">[2] De Morgan’s law: <b><span dir="ltr">http://en.wikipedia.org/wiki/De_Morgan%27s_laws</span></b></p><p style="margin: 2px 0;">[3] Show Solution: <b><span dir="ltr">http://www.learncpp.comjavascript:void(0)</span></b></p><p style="margin: 2px 0;">[4] Image: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/</span></b></p><p style="margin: 2px 0;">[5] Image: <b><span dir="ltr">http://www.learncpp.com/#Chapter0</span></b></p><p style="margin: 2px 0;">[6] Image: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/35-relational-operators-comparisons/</span></b></p><p style="margin: 2px 0;">[7] <span>Email</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=email</span></b></p><p style="margin: 2px 0;">[8] <span>Facebook</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=facebook</span></b></p><p style="margin: 2px 0;">[9] <span>Twitter</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=twitter</span></b></p><p style="margin: 2px 0;">[10] <span>Google</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=google-plus-1</span></b></p><p style="margin: 2px 0;">[11] <span>Pinterest</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/36-logical-operators/?share=pinterest</span></b></p><p></p>
		
		<p style="text-align: right;" id="print-link">
			<a href="#Print" onclick="window.print(); return false;" title="Click here to print.">
				Click 
				here				to print.			</a> 
		</p>

		
		<p style="text-align: center;">
			Copyright © 2015 Learn C++. All rights reserved.		</p>
	</footer>

</main>








</body></html>
<!-- Dynamic page generated in 2.713 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-06-03 02:16:50 -->
<!-- Compression = gzip -->