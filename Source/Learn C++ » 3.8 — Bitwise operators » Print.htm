<!DOCTYPE html>
<html lang="en"><head>
	<title>Learn C++  » 3.8 — Bitwise operators » Print</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta name="Robots" content="noindex, nofollow">
			<link rel="stylesheet" href="Learn%20C++%20%C2%BB%203.8%20%E2%80%94%20Bitwise%20operators%20%C2%BB%20Print_files/print-css.css" type="text/css" media="screen, print">
			<link rel="canonical" href="http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/">
</head>
<body>

<main role="main" class="center">

	
		<header class="entry-header">

			<span class="hat">
				<strong>
					- Learn C++ 
					- 
					<span dir="ltr">http://www.learncpp.com</span> 
					-
				</strong>
			</span>
			
			<div class="code-block code-block-1" style="float:left;margin:8px 8px 8px 0px;"><div class="ABD_display_wrapper ABD_shortcode_571576a3d515d"><div class="ABD_display ABD_display_noadblock"><div class="cf_monitor">
<script src="Learn%20C++%20%C2%BB%203.8%20%E2%80%94%20Bitwise%20operators%20%C2%BB%20Print_files/ca-pub-0588844875925051.js"></script><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript" src="Learn%20C++%20%C2%BB%203.8%20%E2%80%94%20Bitwise%20operators%20%C2%BB%20Print_files/show_ads.js">
</script><ins id="aswift_0_expand" style="display:inline-table;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" frameborder="0" height="280" width="336"></iframe></ins></ins>
</div></div><div class="ABD_display ABD_display_adblock" style="display: none;"><div style="width: 336px; height: 280px; display: inline-block; margin: 15px; padding: 15px; border-width: 1px; border-style: solid">
  <p>Hi there.</p>
  
  <p>It looks like you're using an ad blocker.</p>

  <p>That's okay.  But we would like you to know that we are able to keep this content free and updated because we're ad supported.</p>
  
  <p>If you're finding our content valuable, please consider supporting us by disabling your ad blocker for just this site.</p>

  <p>Thanks,</p>

  <p>Alex<br>LearnCpp.com</p>
</div></div></div></div>
			<h1 class="entry-title">
				3.8 — Bitwise operators			</h1>

			<span class="entry-date">

				Posted By 

				<cite>Alex</cite> 

				On 

				<time>	
					June 17, 2007 @ 1:12 pm 
				</time>

			  	<span>
			  		In 
			  		C++ Tutorial | 
			  	</span>	

		  		<a href="#comments_controls">
		  			48 Comments	  			</a>	  			

				</span>
			
		</header>	

		<div class="entry-content">

			<p>Note: Many people find this lesson challenging.  If you get stuck,
 skip the lesson (and the next one) and come back later.  This 
information is here for your knowledge, but is not required to progress 
with the tutorials.</p>
<p>Bit manipulation operators manipulate individual bits within a variable.</p>
<p><strong>Why bother with bitwise operators?</strong></p>
<p>In the past, memory was extremely expensive, and computers did not 
have much of it.  Consequently, there were incentives to make use of 
every bit of memory available.  Consider the bool data type -- even 
though it only has two possible values (true and false), which can be 
represented by a single bit, it takes up an entire byte of memory!  This
 is because variables need unique addresses, and memory can only be 
addressed in bytes.  The bool uses 1 bit and the other 7 go to waste.</p>
<p>Using bitwise operators, it is possible to write functions that allow
 us to compact 8 booleans into a single byte-sized variable, enabling 
significant memory savings at the expense of more complex code.  In the 
past, this was a good trade-off.  Today, at least for application 
programming, it is probably not.</p>
<p>Now memory is significantly cheaper, and programmers have found that 
it is often a better idea to code what is easiest to understand and 
maintain than what is most efficient.  Consequently, bitwise operators 
have somewhat fallen out of favor, except in certain circumstances where
 maximum optimization is needed (eg. scientific programs that use 
enormous data sets, games where bit manipulation tricks can be used for 
extra speed, or embedded programming, where memory is still limited).  
Nevertheless, it is good to at least know about their existence.</p>
<p>There are 6 bit manipulation operators:</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<th>Operator</th>
<th>Symbol</th>
<th>Form</th>
<th>Operation</th>
</tr>
<tr>
<td>left shift</td>
<td>&lt;&lt;</td>
<td>x &lt;&lt; y</td>
<td>all bits in x shifted left y bits</td>
</tr>
<tr>
<td>right shift</td>
<td>&gt;&gt;</td>
<td>x &gt;&gt; y</td>
<td>all bits in x shifted right y bits</td>
</tr>
<tr>
<td>bitwise NOT</td>
<td>~</td>
<td>~x</td>
<td>all bits in x flipped</td>
</tr>
<tr>
<td>bitwise AND</td>
<td>&amp;</td>
<td>x &amp; y</td>
<td>each bit in x AND each bit in y</td>
</tr>
<tr>
<td>bitwise OR</td>
<td>|</td>
<td>x | y</td>
<td>each bit in x OR each bit in y</td>
</tr>
<tr>
<td>bitwise XOR</td>
<td>^</td>
<td>x ^ y</td>
<td>each bit in x XOR each bit in y</td>
</tr>
</tbody></table>
<p>Bit manipulation is one of the few cases where you should unambiguously use <em>unsigned</em>
 integer data types.  This is because C++ does not guarantee how signed 
integers are stored, nor how some bitwise operators apply to signed 
variables.</p>
<p><em>Rule: When dealing with bit operators, use unsigned integers.</em></p>
<p><strong>Bitwise left shift (&lt;&lt;) and bitwise right shift (&gt;&gt;) operators</strong></p>
<p><b>Note: In the following examples, we will generally be working with 4-bit binary values.</b>
  This is for the sake of convenience and keeping the examples simple.  
In C++, the number of bits used will be based on the size of the data 
type (8 bits per byte).</p>
<p>The bitwise left shift (&lt;&lt;) operator shifts bits to the left.  
The left operand is the expression to shift, and the right operator is 
an integer number of bits to shift by.  So when we say <code>3 &lt;&lt; 1</code>, we are saying "shift the bits in the literal 3 left by 1 place".</p>
<p>For example, consider the number 3, which is binary 0011:</p>
<p>3 = 0011<br>
3 &lt;&lt; 1 = 0110 = 6<br>
3 &lt;&lt; 2 = 1100 = 12<br>
3 &lt;&lt; 3 = 1000 = 8</p>
<p>Note that in the third case, we shifted a bit off the end of the 
number!  Bits that are shifted off the end of the binary number are lost
 forever.</p>
<p>(Reminder: We're working with 4-bit values here.  With an 8-bit 
value, 3 &lt;&lt; 3 would be 24 because the 16-bit wouldn't be shifted 
off the end of the binary number).</p>
<p>The bitwise right shift (&gt;&gt;) operator shifts bits to the right.</p>
<p>12 = 1100<br>
12 &gt;&gt; 1 = 0110 = 6<br>
12 &gt;&gt; 2 = 0011 = 3<br>
12 &gt;&gt; 3 = 0001 = 1</p>
<p>Note that in the third case we shifted a bit off the right end of the number, so it is lost.</p>
<p>Although our examples above involve shifting literals, you can shift variables as well:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-5751593b92315801985117" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5751593b92315801985117-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5751593b92315801985117-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5751593b92315801985117-1"><span class="crayon-t">unsigned</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">4</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-5751593b92315801985117-2"><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// x will be 8</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0010 seconds] -->
<p></p>
<p>Note that the results of applying the bitwise shift operators to a signed integer are compiler dependent.</p>
<p><strong>What!?  Aren't operator&lt;&lt; and operator&gt;&gt; used for input and output?</strong></p>
<p>They sure are.</p>
<p>Programs today typically do not make much use of the bitwise left and
 right shift operators to shift bits.  Rather, you tend to see the 
bitwise left shift operator used with cout to output text.  Consider the
 following program:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-5751593b9232f443930412" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5751593b9232f443930412-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5751593b9232f443930412-2">2</div><div class="crayon-num" data-line="crayon-5751593b9232f443930412-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5751593b9232f443930412-4">4</div><div class="crayon-num" data-line="crayon-5751593b9232f443930412-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5751593b9232f443930412-6">6</div><div class="crayon-num" data-line="crayon-5751593b9232f443930412-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5751593b9232f443930412-8">8</div><div class="crayon-num" data-line="crayon-5751593b9232f443930412-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5751593b9232f443930412-10">10</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5751593b9232f443930412-1"><span class="crayon-p">#include &lt;iostream&gt;</span></div><div class="crayon-line crayon-striped-line" id="crayon-5751593b9232f443930412-2">&nbsp;</div><div class="crayon-line" id="crayon-5751593b9232f443930412-3"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5751593b9232f443930412-4"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-5751593b9232f443930412-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">unsigned</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">4</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-5751593b9232f443930412-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// use operator&lt;&lt; for left shift</span></div><div class="crayon-line" id="crayon-5751593b9232f443930412-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// use operator&lt;&lt; for output</span></div><div class="crayon-line crayon-striped-line" id="crayon-5751593b9232f443930412-8">&nbsp;</div><div class="crayon-line" id="crayon-5751593b9232f443930412-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-5751593b9232f443930412-10"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0014 seconds] -->
<p></p>
<p>This program prints:</p>
<pre>8
</pre>
<p>In the above program, how does operator&lt;&lt; know to shift bits in
 one case and output x in another case?  The answer is that std::cout 
has <strong>overridden</strong> (replaced) the default behavior of the 
&lt;&lt; operator and given it a new meaning (to output text to the 
console).  When the compiler sees that the left operand of 
operator&lt;&lt; is std::cout, it knows that it should call the version 
of operator&lt;&lt; that std::cout overrode to do output.  If the left 
operand is an integer type, then operator&lt;&lt; knows it should do its
 usual bit-shifting behavior.</p>
<p>We will talk more about operator overloading in a future section, 
including discussion of how to override operators for your own purposes.</p>
<p><strong>Bitwise NOT</strong></p>
<p>The bitwise NOT operator (~) is perhaps the easiest to understand of 
all the bitwise operators.  It simply flips each bit from a 0 to a 1, or
 vice versa.  Note that the result of a bitwise NOT is dependent on what
 size your data type is! </p>
<p>Assuming 4 bits:<br>
4 = 0100<br>
~4 = 1011 = 11 (decimal)</p>
<p>Assuming 8 bits:<br>
4 = 0000 0100<br>
~4 = 1111 1011 = 251 (decimal)</p>
<p><strong>Bitwise AND, OR, and XOR</strong></p>
<p>Bitwise AND (&amp;) and bitwise OR (|) work similarly to their 
logical AND and logical OR counterparts.  However, rather than 
evaluating a single boolean value, they are applied to each bit!  For 
example, consider the expression <code>5 | 6</code>.  In binary, this is
 represented as 0101 | 0110.  To do (any) bitwise operations, it is 
easiest to line the two operands up like this:</p>
<pre>0 1 0 1 // 5
0 1 1 0 // 6
</pre>
<p>and then apply the operation to each <em>column</em> of bits.  If you
 remember, logical OR evaluates to true (1) if either the left or the 
right or both operands are true (1).  Bitwise OR evaluates to 1 if 
either bit (or both) is 1.  Consequently, 5 | 6 evaluates like this:</p>
<pre>0 1 0 1 // 5
0 1 1 0 // 6
-------
0 1 1 1 // 7
</pre>
<p>Our result is 0111 binary (7 decimal).</p>
<p>We can do the same thing to compound OR expressions, such as <code>1 | 4 | 6</code>.  If any of the bits in a column are 1, the result of that column is 1.</p>
<pre>0 0 0 1 // 1
0 1 0 0 // 4
0 1 1 0 // 6
--------
0 1 1 1 // 7
</pre>
<p>1 | 4 | 6 evaluates to 7.</p>
<p>Bitwise AND works similarly.  Logical AND evaluates to true if both 
the left and right operand evaluate to true.  Bitwise AND evaluates to 
true if both bits in the column are 1)  Consider the expression <code>5 &amp; 6</code>.  Lining each of the bits up and applying an AND operation to each column of bits:</p>
<pre>0 1 0 1 // 5
0 1 1 0 // 6
--------
0 1 0 0 // 4
</pre>
<p>Similarly, we can do the same thing to compound AND expressions, such as <code>1 &amp; 3 &amp;7</code>.  If all of the bits in a column are 1, the result of that column is 1.</p>
<pre>0 0 0 1 // 1
0 0 1 1 // 3
0 1 1 1 // 7
--------
0 0 0 1 // 1
</pre>
<p>The last operator is the bitwise XOR (^), also known as <em>exclusive or</em>. When evaluating two operands, XOR evaluates to true (1) if one <em>and only one</em> of it's operands is true (1).  If neither or both are true, it evaluates to 0.  Consider the expression <code>6 ^ 3</code>:</p>
<pre>0 1 1 0 // 6
0 0 1 1 // 3
-------
0 1 0 1 // 5
</pre>
<p>It is also possible to evaluate compound XOR expression column style, such as <code>1 ^ 3 ^ 7</code>.
  If there are an even number of 1 bits in a column, the result is 0.  
If there are an odd number of 1 bits in a column, the result is 1.</p>
<pre>0 0 0 1 // 1
0 0 1 1 // 3
0 1 1 1 // 7
--------
0 1 0 1 // 5
</pre>
<p><strong>Bitwise assignment operators</strong></p>
<p>As with the arithmetic assignment operators, C++ provides bitwise 
assignment operators in order to facilitate easy modification of 
variables.</p>
<table border="1" cellpadding="3" cellspacing="0">
<tbody><tr>
<th>Operator</th>
<th>Symbol</th>
<th>Form</th>
<th>Operation</th>
</tr>
<tr>
<td>Left shift assignment</td>
<td>&lt;&lt;=</td>
<td>x &lt;&lt;= y</td>
<td>Shift x left by y bits</td>
</tr>
<tr>
<td>Right shift assignment</td>
<td>&gt;&gt;=</td>
<td>x &gt;&gt;= y</td>
<td>Shift x right by y bits</td>
</tr>
<tr>
<td>Bitwise OR assignment</td>
<td>|=</td>
<td>x |= y</td>
<td>Assign x | y to x</td>
</tr>
<tr>
<td>Bitwise AND assignment</td>
<td>&amp;=</td>
<td>x &amp;= y</td>
<td>Assign x &amp; y to x</td>
</tr>
<tr>
<td>Bitwise XOR assignment</td>
<td>^=</td>
<td>x ^= y</td>
<td>Assign x ^ y to x</td>
</tr>
</tbody></table>
<p>For example, instead of writing <code>x = x &lt;&lt; 1;</code>, you can write <code>x &lt;&lt;= 1;</code>.</p>
<p><strong>Summary</strong></p>
<p>Summarizing how to evaluate bitwise operations utilizing the column method:</p>
<p>When evaluating bitwise OR, if any bit in a column is 1, the result for that column is 1.<br>
When evaluating bitwise AND, if all bits in a column are 1, the result for that column is 1.<br>
When evaluating bitwise XOR, if there are an odd number of 1 bits in a column, the result for that column is 1.</p>
<p><strong>Quiz</strong></p>
<p>1) What does 0110 &gt;&gt; 2 evaluate to in binary?<br>
2) What does 5 | 12 evaluate to in decimal?<br>
3) What does 5 &amp; 12 evaluate to in decimal?<br>
4) What does 5 ^ 12 evaluate to in decimal?</p>
<p><strong>Quiz answers</strong></p>
<p>1) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[1]</sup></p>
<div class="solution_div" id="id647495744" style="display:none">
0110 &gt;&gt; 2 evaluates to 0001
</div>
<p>2) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[1]</sup></p>
<div class="solution_div" id="id1965109277" style="display:none">
5 | 12 =<br>
0 1 0 1<br>
1 1 0 0<br>
--------<br>
1 1 0 1 = 13
</div>
<p>3) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[1]</sup></p>
<div class="solution_div" id="id1515406288" style="display:none">
5 &amp; 12 =<br>
0 1 0 1<br>
1 1 0 0<br>
--------<br>
0 1 0 0 = 4
</div>
<p>4) <a href="http://www.learncpp.comjavascript:void%280%29" rel="external">Show Solution</a> <sup>[1]</sup></p>
<div class="solution_div" id="id30449560" style="display:none">
5 ^ 12 =<br>
0 1 0 1<br>
1 1 0 0<br>
--------<br>
1 0 0 1 = 9
</div>
<table border="0" cellpadding="3">
<tbody><tr><td>
	<a href="http://www.learncpp.com/cpp-tutorial/3-8a-bit-flags-and-bit-masks/" rel="external"><img src="Learn%20C++%20%C2%BB%203.8%20%E2%80%94%20Bitwise%20operators%20%C2%BB%20Print_files/next.png" align="middle"> 3.8a -- Bit flags and bit masks</a> <sup>[2]</sup>
</td></tr>
<tr><td>
        <a href="http://www.learncpp.com/#Chapter0" rel="external"><img src="Learn%20C++%20%C2%BB%203.8%20%E2%80%94%20Bitwise%20operators%20%C2%BB%20Print_files/up.png" align="middle"> Index</a> <sup>[3]</sup>
</td></tr>
<tr><td>
	<a href="http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/" rel="external"><img src="Learn%20C++%20%C2%BB%203.8%20%E2%80%94%20Bitwise%20operators%20%C2%BB%20Print_files/prev.png" align="middle"> 3.7 -- Converting between binary and decimal</a> <sup>[4]</sup>
</td></tr>
</tbody></table>

<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-email"><a href="http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=email" rel="external"><span>Email</span></a> <sup>[5]</sup></li><li class="share-facebook"><a href="http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=facebook" rel="external"><span>Facebook</span></a> <sup>[6]</sup></li><li class="share-twitter"><a href="http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=twitter" rel="external"><span>Twitter</span></a> <sup>[7]</sup></li><li class="share-google-plus-1"><a href="http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=google-plus-1" rel="external"><span>Google</span></a> <sup>[8]</sup></li><li class="share-pinterest"><a href="http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=pinterest" rel="external"><span>Pinterest</span></a> <sup>[9]</sup></li><li class="share-end"></li></ul></div></div></div><div class="code-block code-block-2" style="float:left;margin:8px 8px 8px 0px;"><div class="cf_monitor">
<div id="171844866">
    <script type="text/javascript">
    try {
        window._mNHandle.queue.push(function () {
		    window._mNDetails.loadTag("171844866", "336x280", "171844866");
		    });
		}
    catch (error) {}
	</script>
</div>
</div></div>
		</div>

		
	<div class="comments">
			</div>
	
	<footer class="footer">
		<p>
			Article printed from 
			Learn C++: 

			<strong dir="ltr">
				http://www.learncpp.com			</strong>
		</p>

		<p>
			URL to article: 
			<strong dir="ltr">
				http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/			</strong>
		</p>
		
					<p>URLs in this post:</p><p style="margin: 2px 0;">[1] Show Solution: <b><span dir="ltr">http://www.learncpp.comjavascript:void(0)</span></b></p><p style="margin: 2px 0;">[2] Image: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/3-8a-bit-flags-and-bit-masks/</span></b></p><p style="margin: 2px 0;">[3] Image: <b><span dir="ltr">http://www.learncpp.com/#Chapter0</span></b></p><p style="margin: 2px 0;">[4] Image: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/37-converting-between-binary-and-decimal/</span></b></p><p style="margin: 2px 0;">[5] <span>Email</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=email</span></b></p><p style="margin: 2px 0;">[6] <span>Facebook</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=facebook</span></b></p><p style="margin: 2px 0;">[7] <span>Twitter</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=twitter</span></b></p><p style="margin: 2px 0;">[8] <span>Google</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=google-plus-1</span></b></p><p style="margin: 2px 0;">[9] <span>Pinterest</span>: <b><span dir="ltr">http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/?share=pinterest</span></b></p><p></p>
		
		<p style="text-align: right;" id="print-link">
			<a href="#Print" onclick="window.print(); return false;" title="Click here to print.">
				Click 
				here				to print.			</a> 
		</p>

		
		<p style="text-align: center;">
			Copyright © 2015 Learn C++. All rights reserved.		</p>
	</footer>

</main>








</body></html>
<!-- Dynamic page generated in 3.392 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-06-03 02:17:32 -->
<!-- Compression = gzip -->